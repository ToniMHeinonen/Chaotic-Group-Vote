<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init
Area_Width = 200; // Width of scroller.
Area_Height = 150; // Height of scroller.
Scroll = 0; // Amount that has been scrolled.
Scroll_Speed = 6; // Scroll pixels per step.
Surface = -1;

// Button information
Buttons[0, 0] = "Text 1"; // Text
Buttons[0, 1] = 10; // X1
Buttons[0, 2] = 10; // Y1
Buttons[0, 3] = 190; // X2
Buttons[0, 4] = 50; // Y2

Buttons[1, 0] = "Text 2";
Buttons[1, 1] = 10;
Buttons[1, 2] = 60;
Buttons[1, 3] = 190;
Buttons[1, 4] = 100;

Buttons[2, 0] = "Text 3";
Buttons[2, 1] = 10;
Buttons[2, 2] = 110;
Buttons[2, 3] = 190;
Buttons[2, 4] = 150;

Buttons[3, 0] = "Text 4";
Buttons[3, 1] = 10;
Buttons[3, 2] = 160;
Buttons[3, 3] = 190;
Buttons[3, 4] = 200;

Buttons[4, 0] = "Text 5";
Buttons[4, 1] = 10;
Buttons[4, 2] = 210;
Buttons[4, 3] = 190;
Buttons[4, 4] = 250;

Clicked = -1; // Button that was clicked, -1 if none.
Scroll_Top = 260 - Area_Height; // Maximum scroll amount.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mouse control
// Mouse left clicked.
if(mouse_check_button_pressed(mb_left)){
    // If click happened inside scroll area.
    if(point_in_rectangle(mouse_x, mouse_y, x, y, x + Area_Width, y + Area_Height)){
        // Translate clicked screen position to position on the button list.
        var Click_X = mouse_x - x;
        var Click_Y = mouse_y + Scroll - y;
        // Go through button array.
        for(var i = 0; i &lt; array_height_2d(Buttons); i++){
           // Check if clicked position is inside button bounds.
            if(point_in_rectangle(Click_X, Click_Y, Buttons[i, 1], Buttons[i, 2], Buttons[i, 3], Buttons[i, 4])){
                Clicked = i;
            }
        }
    }
}

else if(mouse_wheel_up()){
   Scroll = max(0, Scroll - Scroll_Speed);
}

else if(mouse_wheel_down()){
   Scroll = min(Scroll_Top, Scroll + Scroll_Speed);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw on surface
draw_set_color(global.text_color);
draw_set_font(fnt_menu);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_text(x,y,title);
// Recreate surface if necessary.
if(!surface_exists(Surface)){
    Surface = surface_create(Area_Width, Area_Height);
    surface_set_target(Surface);
    draw_clear_alpha(c_black, 0);
    surface_reset_target();
}

surface_set_target(Surface);
// Black background for scroll area.
draw_set_color(c_black);
draw_rectangle(0, 0, Area_Width, Area_Height, false);
for(var i = 0; i &lt; array_height_2d(Buttons); i++){
   // Clicked button is red, otherwise white.
    if(Clicked == i) draw_set_color(c_red);
    else draw_set_color(c_white);
   // Offset button position by scroll amount.
    draw_rectangle(Buttons[i, 1], Buttons[i, 2] - Scroll, Buttons[i, 3], Buttons[i, 4] - Scroll, false);
    draw_set_color(c_black);
   // Offset button's text position by scroll amount.
    draw_text(Buttons[i, 3] / 2, Buttons[i, 2] - Scroll, Buttons[i, 0]);
}
surface_reset_target();

draw_surface(Surface, x, y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
