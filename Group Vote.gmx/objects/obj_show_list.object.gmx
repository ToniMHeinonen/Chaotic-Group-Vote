<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spawn objects in room
if (global.restart) {
    global.popup = false;
    global.block = false;
    var pro = instance_create(100,30,obj_listmenu_topic);
    pro.title = "Add";
    var pro = instance_create(250,30,obj_listmenu_topic);
    pro.title = "Save";
    var pro = instance_create(400,30,obj_listmenu_topic);
    pro.title = "File";
    var pro = instance_create(550,30,obj_listmenu_topic);
    pro.title = "Sort";
    var pro = instance_create(room_width-100,30,obj_listmenu_topic);
    pro.title = "Exit";
}
global.restart = true;
global.update = true;
global.delete = false;
global.ignored = false;
global.restore = false;
global.rename = false;
global.drop = false;
global.sel_pos = 0;
global.scrolling = false;
global.scroll_amount = 625;
space = 32;
row = 1;
listx = 50;
listy = 135;
draw_listx[1] = 50;
draw_listx[2] = 675;
draw_listx[3] = 1300;

//Spawn Fallen if peril list not empty
scr_load_peril_items();
if (!ds_list_empty(name)) {
    var pro = instance_create(400,70,obj_listmenu_topic);
    pro.title = "Fallen";
}
scr_destroy_items();

//If list deleted or new list make peril false
if (global.list_slot == "") { 
    global.peril = false;
    exit;
}

if (global.peril) then scr_load_peril_items();
else scr_load_items();

//If peril list gets emptied go back to normal list
if (ds_list_empty(name)) {
    global.peril = false;
    scr_load_items();
}

switch (global.sort_by) {
    case "Whole": scr_sort_by_whole(); break;
    case "Name": scr_sort_by_name(); break;
    case "Bonus": scr_sort_by_bonus(); break;
    case "Peril": scr_sort_by_extra(); break;
}

var k = 0;
for(var i = 0; i&lt;ds_list_size(name); i++) {
    if (listy+space*k &gt; room_height-40) {
        k = 0;
        listx += 625;
        row ++;
    }
    item = instance_create(listx,listy+space*k,obj_list_item);
    item.name = name[| i];
    item.bonus = bonus[| i];
    item.extra = extra[| i];
    item.whole = whole[| i];
    item.ignored = ignored[| i];
    item.group = group[| i];
    item.position = i;
    global.list_name[i] = item.name;
    global.list_bonus[i] = item.bonus;
    global.list_extra[i] = item.extra;
    global.list_whole[i] = item.whole;
    global.list_ignored[i] = item.ignored;
    global.list_group[i] = item.group;
    item.start_bonus = item.bonus;
    item.start_extra = item.extra;
    item.start_x = listx;
    k++;
}
/*if (row == 1) &amp;&amp; (listy+space*i &gt; room_height) {
        row = 2;
        listx = room_width/2;
        listy = listy - space*i;
        listx2 = listx;
    }*/

listx = 50;
listy = 135;

if (global.peril) then scr_save_peril_items();
else scr_save_items();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///delete selection
var sel = global.sel_pos;
if (global.peril) then scr_load_peril_items();
else scr_load_items();
if (global.update) {
    scr_update_items();
}
//Delete selected item
if (global.delete) {
    ds_list_delete(name,sel);
    ds_list_delete(bonus,sel);
    ds_list_delete(extra,sel);
    ds_list_delete(whole,sel);
    ds_list_delete(ignored,sel);
    ds_list_delete(group,sel);
    global.delete = false;
}
//Ignore item
if (global.ignored) {
    ds_list_replace(ignored,sel,global.list_ignored[sel]);
    global.ignored = false;
}
if (global.peril) then scr_save_peril_items();
else scr_save_items();

scr_destroy_items();
global.popup = false;
//If not restart then delete only list items
if (global.restart) {
    instance_destroy(all);
    instance_create(x,y,obj_display_manager);
} else {
    instance_destroy(obj_list_item);
    scr_destroy_buttons(NUMBER);
}
//Restore item back from fallen list
if (global.restore) {
    scr_restore_item();
}
//Drop item to fallen list
if (global.drop) {
    scr_drop_item();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if mouse_check_button(mb_left) {
   if (!position_meeting(mouse_x, mouse_y, all)) {
        global.popup = false;
   }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw list
bonus_x = 300;
peril_x = 400;
whole_x = 500;
if (global.sort_asc) then arrow = spr_ascending;
else arrow = spr_descending;
arrow_y = 100;
switch (global.sort_by) {
    case "Name": arrow_x = draw_listx[1]+70; break;
    case "Bonus": arrow_x = draw_listx[1]+bonus_x+40; break;
    case "Peril": arrow_x = draw_listx[1]+peril_x+37; break;
    case "Whole": arrow_x = draw_listx[1]+whole_x+45; break;
}
draw_set_font(fnt_small);
draw_set_halign(fa_left);
draw_set_color(global.text_color);
draw_text(draw_listx[1],70,"List: " + global.list_slot)
draw_text(draw_listx[1],100,"Name");
draw_set_halign(fa_center);
draw_text(draw_listx[1]+bonus_x,100,"Bonus");
draw_text(draw_listx[1]+peril_x,100,"Peril");
draw_text(draw_listx[1]+whole_x,100,"Whole");
if (row &gt; 1) {
    draw_set_halign(fa_left);
    draw_text(draw_listx[2],100,"Name");
    draw_set_halign(fa_center);
    draw_text(draw_listx[2]+bonus_x,100,"Bonus");
    draw_text(draw_listx[2]+peril_x,100,"Peril");
    draw_text(draw_listx[2]+whole_x,100,"Whole");
}
if (row &gt; 2) {
    draw_set_halign(fa_left);
    draw_text(draw_listx[3],100,"Name");
    draw_set_halign(fa_center);
    draw_text(draw_listx[3]+bonus_x,100,"Bonus");
    draw_text(draw_listx[3]+peril_x,100,"Peril");
    draw_text(draw_listx[3]+whole_x,100,"Whole");
}
draw_sprite(arrow,global.night_mode,arrow_x,arrow_y)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw controls
var startX = 845;
var drawY = 30;
var xOffset = 390;
draw_set_font(fnt_menu);
draw_text(startX, drawY, "LeftCtrl + RMB = Delete");
draw_text(startX + xOffset, drawY, "LeftShift + RMB = Ignore");
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
