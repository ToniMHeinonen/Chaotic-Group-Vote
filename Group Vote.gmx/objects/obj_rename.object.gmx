<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Border dimensions
b_left = room_width/3;
b_top = room_height/3;
b_right = room_width/3*2;
b_bottom = room_height/3*2;
b_xcenter = room_width/2;
b_ycenter = room_height/2;

bgc = c_black;
bgx = 0;
bgy = 0;
bgx100 = 0;
bgy100 = 0;
bgsize = 0;
fade = 0;
ready = false;
add_one = true;

scr_load_items();
scr_update_items();

values = 0;
margin = 64;
text = "Enter name";
keyboard_string = "";
invalid_name = false;
invalid_text = noone;
clone = false;
blink = false;
alarm[0] = 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Free memory from ds_list
scr_destroy_items();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///control blinking
blink = !blink;
alarm[0] = 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///No blanks and exit
if (keyboard_string == " ") then keyboard_string = "";

if (keyboard_check_released(vk_enter)) {
    if (invalid_name) {
        invalid_name = false;
    }
}

if (keyboard_check_released(vk_escape)) {
    if (invalid_name) {
        invalid_name = false;
    } else if (!invalid_name) {
        instance_destroy(obj_show_list);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Increase size
scr_increase_popup();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw popup
display_set_gui_size(room_width,room_height);
draw_set_halign(fa_center);
draw_set_font(fnt_menu);
draw_set_valign(fa_middle);
draw_set_color(global.text_color);
draw_sprite_ext(spr_popup,bgc,bgx,bgy,bgsize,bgsize,0,c_white,1)

if (!ready) then exit;
if (!invalid_name) then draw_text(b_xcenter,b_top+margin*1,text);
draw_set_halign(fa_left);
if (!invalid_name) {
    if (blink) then draw_text(b_xcenter-150,b_top+margin*2,keyboard_string+"|")
    if (!blink) then draw_text(b_xcenter-150,b_top+margin*2,keyboard_string)
}
draw_set_halign(fa_center);

//add name
if (values = 0) {
    if (keyboard_string!="") &amp;&amp; (keyboard_check_released(vk_enter)) &amp;&amp; (!invalid_name)
    {
            for (var i = 0; i &lt; ds_list_size(name); i++) {
                if (scr_compare_strings(keyboard_string, name[| i]) == 0)  {
                    clone = true;
                }
            }
            if (string_length(keyboard_string) &gt; 25) {
                invalid_name = true;
                invalid_text = "Name is too long!#(Max 25 characters)";
                keyboard_string = "";
            } else if (clone) {
                clone = false;
                invalid_name = true;
                invalid_text = "Name already exists!";
                keyboard_string = "";
            } else {
                add_name = keyboard_string;
                text = "Enter bonus";
                keyboard_string = "";
                if (global.full_add) {
                    values += 1;
                } else {
                    if (file_exists("list "+global.list_slot+".ini")) file_delete("list "+global.list_slot+".ini");
                    ini_open("list "+global.list_slot+".ini")
                    ds_list_add(name,add_name);
                    var str = ds_list_write(name);
                    ini_write_string("name","0",str)
                    ds_list_add(bonus,0);
                    var str = ds_list_write(bonus);
                    ini_write_string("bonus","0",str)
                    ds_list_add(extra,0);
                    var str = ds_list_write(extra);
                    ini_write_string("extra","0",str)
                    ds_list_add(whole,0);
                    var str = ds_list_write(whole);
                    ini_write_string("whole","0",str)
                    ds_list_add(ignored,0);
                    var str = ds_list_write(ignored);
                    ini_write_string("ignored","0",str)
                    ds_list_add(group,"");
                    var str = ds_list_write(group);
                    ini_write_string("group","0",str)
                    
                    ini_close();
                    
                    global.list_name[ds_list_size(name)-1] = add_name;
                    global.list_bonus[ds_list_size(name)-1] = 0;
                    global.list_extra[ds_list_size(name)-1] = 0;
                    global.list_whole[ds_list_size(name)-1] = 0;
                    global.list_ignored[ds_list_size(name)-1] = 0;
                    global.list_group[ds_list_size(name)-1] = "";
                    
                    instance_destroy(obj_show_list);
                    if (!add_one) {
                        global.popup = true;
                        var pro = instance_create(0,0,obj_add_new_item);
                        with (pro) {
                            bgx = room_width/2;
                            bgy = room_height/2;
                            bgsize = 1;
                            fade = 1;
                            add_one = false;
                        }
                    }
                }
            }
    }
}

//add bonus
if (values = 1) {
    if (keyboard_string!="") &amp;&amp; (keyboard_check_released(vk_enter)) &amp;&amp; (!invalid_name)
    {
        var strip_string = string_digits(keyboard_string);
        if (string_length(strip_string) == 0) {
                invalid_name = true;
                invalid_text = "Numbers only!";
                keyboard_string = "";
            } else {
                add_bonus = real(keyboard_string);
                values += 1;
                text = "Enter extra";
                keyboard_string = "";
            }
    }
}

//add extra
if (values = 2) {
    if (keyboard_string!="") &amp;&amp; (keyboard_check_released(vk_enter)) &amp;&amp; (!invalid_name)
    {
        var strip_string = string_digits(keyboard_string);
        if (string_length(strip_string) == 0) {
                invalid_name = true;
                invalid_text = "Numbers only!";
                keyboard_string = "";
            } else {
                add_extra = real(keyboard_string);
                values += 1;
            }
    }
}

if (values == 3) {
    add_whole = add_bonus + add_extra;
    if (file_exists("list "+global.list_slot+".ini")) file_delete("list "+global.list_slot+".ini");
    ini_open("list "+global.list_slot+".ini")
    ds_list_add(name,add_name);
    var str = ds_list_write(name);
    ini_write_string("name","0",str)
    ds_list_add(bonus,add_bonus);
    var str = ds_list_write(bonus);
    ini_write_string("bonus","0",str)
    ds_list_add(extra,add_extra);
    var str = ds_list_write(extra);
    ini_write_string("extra","0",str)
    ds_list_add(whole,add_whole);
    var str = ds_list_write(whole);
    ini_write_string("whole","0",str)
    ds_list_add(ignored,0);
    var str = ds_list_write(ignored);
    ini_write_string("ignored","0",str)
    ds_list_add(group,"");
    var str = ds_list_write(group);
    ini_write_string("group","0",str)
    
    
    ini_close();
    
    global.list_name[ds_list_size(name)-1] = add_name;
    global.list_bonus[ds_list_size(name)-1] = add_bonus;
    global.list_extra[ds_list_size(name)-1] = add_extra;
    global.list_whole[ds_list_size(name)-1] = add_whole;
    global.list_ignored[ds_list_size(name)-1] = 0;
    global.list_group[ds_list_size(name)-1] = "";
    
    if (add_one) then instance_destroy(obj_show_list);
}

if (invalid_name) {
    draw_text(b_xcenter,b_top+margin*2,invalid_text);
}

draw_set_halign(fa_left);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
